{"name": "Authorization as admin", "status": "failed", "statusDetails": {"message": "AssertionError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"img#user-profile\"}\n  (Session info: chrome=80.0.3987.132)", "trace": "self = <pages.AdminLoginPage.AdminLoginPage object at 0x104f512e0>\n\n    @allure.step(\"Check if admin logged in admin part\")\n    def check_if_admin_logged_in(self):\n        try:\n>           self._wait_for_visibility(self.USER_ICON)\n\npages/BasePage.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.AdminLoginPage.AdminLoginPage object at 0x104f512e0>, selector = ('css selector', 'img#user-profile'), index = None, wait = 3\n\n    def _wait_for_visibility(self, selector, index=None, wait=3):\n>       return WebDriverWait(self.driver, wait).until(EC.visibility_of(self.__element(selector, index)))\n\npages/BasePage.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.AdminLoginPage.AdminLoginPage object at 0x104f512e0>, selector = ('css selector', 'img#user-profile'), index = None\n\n    def __element(self, selector: tuple, index: int = None):\n        if index:\n            return self.driver.find_elements(*selector)[index]\n        else:\n>           return self.driver.find_element(*selector)\n\npages/BasePage.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x104ee7160>, by = 'css selector', value = 'img#user-profile'\n\n    def find_element(self, by=By.ID, value=None):\n>       return self._dispatch(\"find\", (by, value, self._driver), \"find_element\", (by, value))\n\n../../../.pyenv/versions/3.8.0/envs/otus-selenium-env/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x104ee7160>, l_call = 'find'\nl_args = ('css selector', 'img#user-profile', <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7b8337b303f0ac658652cf1f74e8cb24\")>), d_call = 'find_element'\nd_args = ('css selector', 'img#user-profile')\n\n    def _dispatch(self, l_call, l_args, d_call, d_args):\n        getattr(self._listener, \"before_%s\" % l_call)(*l_args)\n        try:\n            result = getattr(self._driver, d_call)(*d_args)\n        except Exception as e:\n            self._listener.on_exception(e, self._driver)\n>           raise e\n\n../../../.pyenv/versions/3.8.0/envs/otus-selenium-env/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x104ee7160>, l_call = 'find'\nl_args = ('css selector', 'img#user-profile', <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7b8337b303f0ac658652cf1f74e8cb24\")>), d_call = 'find_element'\nd_args = ('css selector', 'img#user-profile')\n\n    def _dispatch(self, l_call, l_args, d_call, d_args):\n        getattr(self._listener, \"before_%s\" % l_call)(*l_args)\n        try:\n>           result = getattr(self._driver, d_call)(*d_args)\n\n../../../.pyenv/versions/3.8.0/envs/otus-selenium-env/lib/python3.8/site-packages/selenium/webdriver/support/event_firing_webdriver.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7b8337b303f0ac658652cf1f74e8cb24\")>, by = 'css selector', value = 'img#user-profile'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n../../../.pyenv/versions/3.8.0/envs/otus-selenium-env/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:976: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7b8337b303f0ac658652cf1f74e8cb24\")>, driver_command = 'findElement', params = {'using': 'css selector', 'value': 'img#user-profile'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../../../.pyenv/versions/3.8.0/envs/otus-selenium-env/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104ee7100>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...007fff6cc6b50d _pthread_body + 0\\\\n20  libsystem_pthread.dylib             0x00007fff6cc6abf9 thread_start + 13\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"img#user-profile\"}\nE         (Session info: chrome=80.0.3987.132)\n\n../../../.pyenv/versions/3.8.0/envs/otus-selenium-env/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser = <selenium.webdriver.support.event_firing_webdriver.EventFiringWebDriver object at 0x104ee7160>, base_url = 'http://192.168.56.101', logger_fixture = <Logger driver (INFO)>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.feature(\"Authorization\")\n    @allure.story(\"Valid authorization\")\n    @allure.title(\"Authorization as admin\")\n    def test_admin_login(browser, base_url, logger_fixture):\n        logger_fixture.info(\"===== test_admin_login =====\")\n        admin_login_page = AdminLoginPage(browser, base_url)\n>       admin_login_page\\\n            .open(logger_fixture)\\\n            .login(\"admin\", \"admin1\")\\\n            .check_if_admin_logged_in()\n\ntests/test_admin_login_page.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.AdminLoginPage.AdminLoginPage object at 0x104f512e0>\n\n    @allure.step(\"Check if admin logged in admin part\")\n    def check_if_admin_logged_in(self):\n        try:\n            self._wait_for_visibility(self.USER_ICON)\n        except NoSuchElementException as e:\n>           raise AssertionError(e.msg)\nE           AssertionError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"img#user-profile\"}\nE             (Session info: chrome=80.0.3987.132)\n\npages/BasePage.py:68: AssertionError"}, "steps": [{"name": "Go to http://192.168.56.101/opencart/admin/", "status": "passed", "start": 1588236135433, "stop": 1588236137981}, {"name": "Sign in admin part", "status": "passed", "steps": [{"name": "Input into ('css selector', 'input#input-username') value 'admin'", "status": "passed", "start": 1588236137985, "stop": 1588236138606}, {"name": "Input into ('css selector', 'input#input-password') value 'admin1'", "status": "passed", "start": 1588236138607, "stop": 1588236138984}, {"name": "Click on ('css selector', 'button[type=submit]')", "status": "passed", "start": 1588236138984, "stop": 1588236140126}], "parameters": [{"name": "username", "value": "'admin'"}, {"name": "password", "value": "'admin1'"}], "start": 1588236137984, "stop": 1588236140127}, {"name": "Check if admin logged in admin part", "status": "failed", "statusDetails": {"message": "AssertionError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"img#user-profile\"}\n  (Session info: chrome=80.0.3987.132)\n", "trace": "  File \"/Users/alex/.pyenv/versions/3.8.0/envs/otus-selenium-env/lib/python3.8/site-packages/allure_commons/_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"/Users/alex/Documents/OTUS_Alyona/otus-qa-course/pages/BasePage.py\", line 68, in check_if_admin_logged_in\n    raise AssertionError(e.msg)\n"}, "attachments": [{"name": "chrome 2020-04-30 11:42:23.138760", "source": "dd014a2e-166d-4bd7-9121-dfd78c578670-attachment.png", "type": "image/png"}], "start": 1588236140127, "stop": 1588236143438}], "attachments": [{"name": "log", "source": "239566b9-dcc9-4ff2-9de7-5a44a5558ec7-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "5a97a5f8-a965-4ec2-a24a-20704ac71192-attachment.txt", "type": "text/plain"}], "start": 1588236135419, "stop": 1588236143453, "uuid": "860b5c0f-c938-4c41-8070-c018bc68a64c", "historyId": "a639be50f1c5ec58b92ba2fcaab55a54", "testCaseId": "f70882c152a54ff97b2b01f22f0c73a3", "fullName": "tests.test_admin_login_page#test_admin_login", "labels": [{"name": "severity", "value": "critical"}, {"name": "feature", "value": "Authorization"}, {"name": "story", "value": "Valid authorization"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_admin_login_page"}, {"name": "host", "value": "Air.local"}, {"name": "thread", "value": "48914-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_admin_login_page"}]}